{
  "_id": "_design/elastic",
  "language": "javascript",
  "lists": {
    "values": "function(head,req) { var row; start({ 'headers': { 'Content-Type': 'text/plain' } }); while(row = getRow()) { send(JSON.stringify(row.value) + '\\n'); } }"
  },
  "views": {
    "biostor": {
      "map": "//----------------------------------------------------------------------------------------\nfunction to_csl(doc) {\n    var csl = {};\n    \n \n \tswitch (doc.type) {\n \t\tcase 'article':\n \t\t\tcsl.type = 'article-journal';\n \t\t\tbreak;\n \t\n \t\tdefault:\n \t\t\tcsl.type = doc.type;\n \t\t\tbreak;\n \t}\n \t\n\t\n\t// title\n\tif (doc.title) {\n\t\tcsl.title = doc.title;\n\t}\n \t\n \n \t// date\n \tif (doc.date) {\n \t\tcsl.issued = {};\n\t\tcsl.issued['date-parts'] = []\n\t\tcsl.issued['date-parts'].push(doc.date);\t\t\n \t} else {\n\t\tif (doc.year) {\n\t\t\tcsl.issued = {};\n\t\t\tcsl.issued['date-parts'] = [];\n\t\t\tcsl.issued['date-parts'].push([parseInt(doc.year)]);\n\t\t}\n\t} \n\t\n\tif (doc.author) {\n\t\tcsl.author = [];\n\t\t\n\t\tfor (var i in doc.author) {\n\t\t\tvar author = {};\n\t\t\t\n\t\t\t// hack while we work with old BioStor BibJSON\n\t\t\tif (doc.author[i].forename) {\n\t\t\t\tauthor.given = doc.author[i].forename;\n\t\t\t}\n\n\t\t\tif (doc.author[i].firstname) {\n\t\t\t\tauthor.given = doc.author[i].firstname;\n\t\t\t}\n\n\t\t\tif (doc.author[i].lastname) {\n\t\t\t\tauthor.family = doc.author[i].lastname;\n\t\t\t}\n\t\t\t\n\t\t\tif (!author.given && doc.author[i].name) {\n\t\t\t\tauthor.literal = doc.author[i].name;\n\t\t\t}\n\t\t\t\n\t\t\tcsl.author.push(author);\n\t\t\t\n\t\t}\n\t}\n\t\t\n\t\n\t// Book\n\tif (doc.publisher) {\n\t\tcsl.publisher = doc.publisher.name;\n\t\t\n\t\tif (doc.publisher.address) {\n\t\t\tcsl['publisher-place'] = doc.publisher.address;\n\t\t}\n\t\t\n\t\tif (doc.pages) {\n\t\t\tcsl.page = doc.pages.replace(/--/, '-');\t\n\t\t}\n\t}\n \t\n \t\n\t// Chapter\n\tif (doc.book) {\n\t\tif (doc.book.title) {\n\t\t\tcsl['container-title'] = doc.book.title;\n\t\t}\n\t\tif (doc.pages) {\n\t\t\tcsl.page = doc.pages.replace(/--/, '-');\t\n\t\t}\n\t\t\n\t\tif (doc.book.publisher) {\n\t\t\tcsl.publisher = doc.book.publisher.name;\n\t\t\n\t\t\tif (doc.book.publisher.address) {\n\t\t\t\tcsl['publisher-place'] = doc.book.publisher.address;\n\t\t\t}\t\t\n\t\t}\n\t\t\n\t\tif (doc.book.editor) {\n\t\t\tcsl.editor = [];\n\t\t\n\t\t\tfor (var i in doc.author) {\n\t\t\t\tvar author = {};\n\t\t\t\n\t\t\t\t// hack while we work with old BioStor BibJSON\n\t\t\t\tif (doc.book.editor[i].forename) {\n\t\t\t\t\tauthor.given = doc.book.editor[i].forename;\n\t\t\t\t}\n\n\t\t\t\tif (doc.book.editor[i].firstname) {\n\t\t\t\t\tauthor.given = doc.book.editor[i].firstname;\n\t\t\t\t}\n\n\t\t\t\tif (doc.book.editor[i].lastname) {\n\t\t\t\t\tauthor.family = doc.book.editor[i].lastname;\n\t\t\t\t}\n\t\t\t\n\t\t\t\tif (!author.given && doc.book.editor[i].name) {\n\t\t\t\t\tauthor.literal = doc.book.editor[i].name;\n\t\t\t\t}\n\t\t\t\n\t\t\t\tcsl.editor.push(author);\n\t\t\t\n\t\t\t}\n\t\t}\t\t\n\t}\n\t\n\t// container\n    if (doc.journal) {\n\t\tif (doc.journal.name) {\n\t\t\tcsl['container-title'] = doc.journal.name;\n\t\t}\n\n\t\tif (doc.journal.series) {\n\t\t\tcsl['collection-title'] = doc.journal.series;\n\t\t}\n\t\n\t\t// volume\n\t\tif (doc.journal.volume) {\n\t\t\tcsl.volume = doc.journal.volume;\t\t\n\t\t} \n\n\t\t// issue\n\t\tif (doc.journal.issue) {\n\t\t\tcsl.issue = doc.journal.issue;\t\t\n\t\t} \n\t\n\t\t// page\n\t\tif (doc.journal.pages) {\n\t\t\tcsl.page = doc.journal.pages.replace(/--/, '-');\t\t\n\t\t} \n\t\n\t\t// issn, oclc\n\t\tif (doc.journal.identifier)\t{\n\t\t\tfor (var i in doc.journal.identifier) {\n\t\t\t\tswitch (doc.journal.identifier[i].type) {\n\t\t\t\t\tcase 'issn':\n\t\t\t\t\t\tif (!csl.ISSN) {\n\t\t\t\t\t\t\tcsl.ISSN = [];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcsl.ISSN.push(doc.journal.identifier[i].id);\n\t\t\t\t\t\tbreak;\n\t\t\t\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\t\n\n\t// identifiers\n\tif (doc.identifier) {\n\t\tfor (var i in doc.identifier) {\n\t\t\tswitch (doc.identifier[i].type) {\n\t\t\t\n\t\t\t\tcase 'biostor':\n\t\t\t\t\tcsl.URL = 'https://biostor.org/reference/' + doc.identifier[i].id;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'doi':\n\t\t\t\t\tcsl.DOI = doc.identifier[i].id;\n\t\t\t\t\tbreak;\n\t\t\t\t\t\n\t\t\t\tcase 'isbn':\n\t\t\t\tcase 'isbn13':\n\t\t\t\t\tcsl.ISBN = doc.identifier[i].id;\n\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t} \n\t\n\treturn csl;\n}\n//----------------------------------------------------------------------------------------\nfunction add_values(edoc, key, value, boost) {\n\tedoc.search_data.fulltext_values.push(value);\n\t\n\tboosted = (typeof boost !== 'undefined') ?  boost : false;\n\t\n\tif (boosted) {\n\t\tedoc.search_data.fulltext_boosted_values.push(value);\n\t}\n\t\n\tswitch (key) {\n\t\tcase 'classification':\n\t\tcase 'container':\n\t\tcase 'author':\n\t\t\tedoc.search_data[key].push(value);\n\t\t\tbreak;\n\n\t\tcase 'type':\n\t\tcase 'year':\n\t\t\tedoc.search_data[key] = value;\n\t\t\tbreak;\n\t\n\t\tdefault:\n\t\t\tbreak;\n\t}\n\t\n\treturn edoc;\n}\n\n//----------------------------------------------------------------------------------------\nfunction message(doc) {\n  if (doc._id.match(/biostor/)) {\n\n\n    var edoc = {};\n    \n    edoc.id = doc._id;\n    edoc.id =  edoc.id.replace(/\\//, '-');\n    \n    // type of document\n    edoc.type = doc.type;\n    \n\t// output to display in list of hits\n\tedoc.search_result_data = {};\n\t\n\t// possible fields to hold information on how to display this object\n\tedoc.search_result_data.name = '';\n\tedoc.search_result_data.description = '';\n\tedoc.search_result_data.thumbnailUrl = '';\n\tedoc.search_result_data.url = '';\n\n\t// BioStor\n\t//edoc.search_result_data.url = 'https://biostor.org/reference/' + doc._id.replace(/biostor\\//, '');\n\t//edoc.search_result_data.thumbnailUrl = 'https://biostor.org/reference/' + doc._id.replace(/biostor\\//, '') + '/thumbnail';\n\t\n\t\n\t// Get thumbnail and URL, and make sure bhl_pages is always an array when \n\t// we send it to Elasticsearch otherwise indexing fails as we mix arrays and objects\n\t//\n\tif (doc.bhl_pages) {\n\t\n\t  edoc.search_result_data.bhl_pages = [];\t  \n\n\t  if (Array.isArray(doc.bhl_pages)) {\n\t    edoc.search_result_data.thumbnailUrl = 'https://www.biodiversitylibrary.org/pagethumb/' + doc.bhl_pages[0] + ',60,60';\n\t    edoc.search_result_data.url = 'https://www.biodiversitylibrary.org/page/' + doc.bhl_pages[0];\n\t    \n\t    edoc.search_result_data.bhl_pages = doc.bhl_pages;\n\t  } else {\n\t   var key = Object.keys(doc.bhl_pages)[0];\n\t   edoc.search_result_data.thumbnailUrl = 'https://www.biodiversitylibrary.org/pagethumb/' + doc.bhl_pages[key] + ',60,60';\n\t   edoc.search_result_data.url = 'https://www.biodiversitylibrary.org/page/' + doc.bhl_pages[key];\n\t   \n\t   for (var i in doc.bhl_pages) {\n\t   \tedoc.search_result_data.bhl_pages.push(doc.bhl_pages[i]);\n\t   }\n\t   \n\t  }\n\t}\n\t\n\t// temporary\n\tedoc.search_result_data.description_parts = [];\n\t\n\t/*\n\tif ($url)\n\t{\n\t\t$doc->search_result_data->url = $url;\n\t}\n\t*/\n\n\t// fields that will be searched on\n\tedoc.search_data = {};\n\t\n\t// text fields for searching on\n\tedoc.search_data.fulltext_values = [];\n\tedoc.search_data.fulltext_boosted_values = [];\n\t\n\t// things to use as facets\n\tedoc.search_data.container = [];\n\tedoc.search_data.author = [];\n\tedoc.search_data.year = null;\n\tedoc.search_data.classification = [];\n\t\n\t\n\t// regular\n\t\n\t// type\n\tedoc.search_data.type = doc.type, false;\n\t\n\t// title\n\n\tif (doc.title) {\n\t\tedoc = add_values(edoc, 'title', doc.title, true);\n\t\tedoc.search_result_data.name = doc.title;\n\t}\n\t\n\t// container\n    if (doc.journal) {\n\t\tif (doc.journal.name) {\n\t\t\tvar container = doc.journal.name;\n\t\t\tedoc = add_values(edoc, 'container', container, true);\n\t\t\tedoc.search_result_data.description_parts.push('in ' + container);\t\n\t\t}\n\t}\t\t\n\t\n\t// author\n\tif (doc.author) {\n\t\tfor (var i in doc.author) {\n    \t\t// simple case\n    \t\tvar name = [];\n    \t\t\n    \t\tif (doc.author[i].firstname) {\n    \t\t\tname.push(doc.author[i].firstname);\n    \t\t}\n     \t\tif (doc.author[i].lastname) {\n    \t\t\tname.push(doc.author[i].lastname);\n    \t\t}\n \t\t\t// just use literal if we have it\n     \t\tif (doc.author[i].name) {\n    \t\t\tname = [doc.author[i].name];\n    \t\t}\n    \t\t\n    \t\tif (name.length > 0) {\n    \t\t\tadd_values(edoc, 'author', name.join(' '), true); \n     \t\t}\n\t\t}\n\t}\n\t\t\n\t//------------------------------------------------------------------------------------\n\n\t// date\n\tif (doc.year) {\n\t\tedoc = add_values(edoc, 'year', parseInt(doc.year));\t\t\t\n\t\tedoc.search_result_data.description_parts.push('in ' + doc.year);\t\t\n\t} \n \n  if (doc.journal) {\n\t// volume\n\tif (doc.journal.volume) {\n\t\tedoc = add_values(edoc, 'volume', doc.journal.volume);\t\t\n\t\tedoc.search_result_data.description_parts.push('in volume ' + doc.journal.volume);\t\t\n\t} \n\n\t// issue\n\tif (doc.journal.issue) {\n\t\tedoc = add_values(edoc, 'issue', doc.journal.issue);\t\t\n\t\tedoc.search_result_data.description_parts.push('issue ' + doc.journal.issue);\t\t\n\t} \n\n\t// page\n\tif (doc.journal.pages) {\n\t\tedoc = add_values(edoc, 'page', doc.journal.pages);\n\t\tvar prefix = 'page';\n\t\tif (doc.journal.pages.match(/-/)) {\n\t\t\tprefix = 'pages';\n\t\t}\n\t\tedoc.search_result_data.description_parts.push(prefix + ' ' + doc.journal.pages.replace(/--/, '-'));\t\t\n\t} \n  }\n\n\t// DOI\n\tif (doc.DOI) {\n\t\tedoc = add_values(edoc, 'doi', doc.message.DOI);\t\t\n\t\tedoc.search_result_data.doi = doc.message.DOI;\n\t} \n\t\n\n\t//------------------------------------------------------------------------------------\n\t// classification\n    if (doc.classification) {\n    \tfor (var i in doc.classification) {\n\t\t\tedoc = add_values(edoc, 'classification', doc.classification[i], false);\n\t\t}\n\t}\n\t\n\t//------------------------------------------------------------------------------------\n\t\n\t\n\t// geo\n    if (doc.geometry) {\n      // check\n      var geometry = {};\n      geometry.type = doc.geometry.type;\n      geometry.coordinates = [];\n      \n      for (var k in doc.geometry.coordinates) {\n         if (\n          (doc.geometry.coordinates[k][0] >= -180)\n          && (doc.geometry.coordinates[k][0] <= 180)\n          && (doc.geometry.coordinates[k][1] >= -90)\n          && (doc.geometry.coordinates[k][1] <= 90)) {\n            geometry.coordinates.push(doc.geometry.coordinates[k]);\n          }\n      }\n \n      if (geometry.coordinates.length > 0)  {\n        edoc.search_data.geometry = geometry;\n      }    \n \n\t}\n\t\n\tif (doc.text) {\n\t  edoc = add_values(edoc, 'text', doc.text[0], false);\n\t}\n\t\n\t//------------------------------------------------------------------------------------\n    // citation-js\n    edoc.search_result_data.csl = to_csl(doc);\n\t\n\t//------------------------------------------------------------------------------------\n\t// cleanup\n\tedoc.search_data.fulltext = edoc.search_data.fulltext_values.join(' ');\n\tdelete edoc.search_data.fulltext_values;\n\n\tedoc.search_data.fulltext_boosted = edoc.search_data.fulltext_boosted_values.join(' ');\n\tdelete edoc.search_data.fulltext_boosted_values;\n\t\n\tedoc.search_result_data.description = 'Published ' + edoc.search_result_data.description_parts.join(', ');\n\tdelete edoc.search_result_data.description_parts;\n\t\n\tif (!edoc.search_result_data.thumbnailUrl) {\n\t\tdelete edoc.search_result_data.thumbnailUrl;\n\t}\n\n\tif (!edoc.search_result_data.url) {\n\t\tdelete edoc.search_result_data.url;\n\t}\n\t\n\t//$('#jsonld').html(JSON.stringify(edoc, null, 2));\n\n    emit(doc._id, edoc);\n    \n\n  }\n}\n\nfunction(doc) {\n  if (doc._id.match(/biostor/)) {\n    message(doc);\n  }\n} "
    }
  }
}